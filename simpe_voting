pragma solidity 0.4.24; //1.version confirm

contract Vote {
    
    //structure : for the candidate. grade, name,,,
    
    struct candidator {
        string name;
        uint upVote;
    }
    
    
    //variable : if decline varialbe as public, then can get getter automatically
    bool live;
    address owner;
    candidator[] public candidatorList;
    
    //mapping
    mapping(address => bool) Voted;
    
    //event
    event AddCandidator(string name);
    event UpVote(string candidator, uint upVote);
    event FinishVote(bool live);
    event Voting(address owner);
    //modifier : only onwer of the contract can finish the voting
    
    modifier onlyOwner{
        require(msg.sender == owner);
        _;
    }
    
    //constructor
    constructor() public {
        owner = msg.sender;
        live = true;
        
        emit Voting(owner);
    }
    
    
// candidator
    function addCandidator(string _name) public onlyOwner {
        require(live == true);
        require(candidatorList.length < 5);
        candidatorList.push(candidator(_name,0));
        //evnet
        emit AddCandidator(_name);
    }

// voting
    function upVote(uint _indexOfCandidator) public {
        require(live == true);
        require(_indexOfCandidator<=candidatorList.length);
        require(Voted[msg.sender] == false);
        
        candidatorList[_indexOfCandidator].upVote++;
        
        Voted[msg.sender] = true;
        
        //event
        emit UpVote(candidatorList[_indexOfCandidator].name, candidatorList[_indexOfCandidator].upVote);
    }
// finish vote
    function finishVote() public onlyOwner {
        require(live == true);
        //only owner can finish the vote -> modifier
        live = false;
        
        emit FinishVote(live);
        
        
    }

}

